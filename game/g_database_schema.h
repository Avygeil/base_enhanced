#pragma once

const char *const sqlCreateTables =
"CREATE TABLE IF NOT EXISTS [metadata] (                                                             \n"
"  [key] TEXT COLLATE NOCASE PRIMARY KEY NOT NULL,                                                   \n"
"  [value] TEXT DEFAULT NULL                                                                         \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [accounts] (                                                             \n"
"    [account_id] INTEGER NOT NULL,                                                                  \n"
"    [name] TEXT COLLATE NOCASE NOT NULL,                                                            \n"
"    [created_on] INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),                                  \n"
"    [usergroup] TEXT DEFAULT NULL,                                                                  \n"
"    [flags] INTEGER NOT NULL DEFAULT 0,                                                             \n"
"    PRIMARY KEY ( [account_id] ),                                                                   \n"
"    UNIQUE ( [name] )                                                                               \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [sessions] (                                                             \n"
"    [session_id] INTEGER NOT NULL,                                                                  \n"
"    [hash] INTEGER NOT NULL,                                                                        \n"
"    [info] TEXT NOT NULL,                                                                           \n"
"    [account_id] INTEGER DEFAULT NULL,                                                              \n"
"    PRIMARY KEY ( [session_id] ),                                                                   \n"
"    UNIQUE ( [hash] ),                                                                              \n"
"    FOREIGN KEY ( [account_id] )                                                                    \n"
"        REFERENCES accounts ( [account_id] )                                                        \n"
"        ON DELETE SET NULL                                                                          \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [nicknames] (                                                            \n"
"    [nickname_id] INTEGER NOT NULL,                                                                 \n"
"    [session_id] INTEGER NOT NULL,                                                                  \n"
"    [name] TEXT NOT NULL,                                                                           \n"
"    [duration] INTEGER NOT NULL DEFAULT 0,                                                          \n"
"    PRIMARY KEY ( [nickname_id] ),                                                                  \n"
"    UNIQUE ( [session_id], [name] ),                                                                \n"
"    FOREIGN KEY ( [session_id] )                                                                    \n"
"        REFERENCES sessions ( [session_id] )                                                        \n"
"        ON DELETE CASCADE                                                                           \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [fastcaps] (                                                             \n"
"    [fastcap_id] INTEGER NOT NULL,                                                                  \n"
"    [mapname] TEXT COLLATE NOCASE NOT NULL,                                                         \n"
"    [type] INTEGER NOT NULL,                                                                        \n"
"    [session_id] INTEGER NOT NULL,                                                                  \n"
"    [capture_time] INTEGER NOT NULL,                                                                \n"
"    [date] NOT NULL DEFAULT (strftime('%s', 'now')),                                                \n"
"    [extra] TEXT DEFAULT NULL,                                                                      \n"
"    PRIMARY KEY ( [fastcap_id] ),                                                                   \n"
"    UNIQUE ( [mapname], [type], [session_id] ),                                                     \n"
"    FOREIGN KEY ( [session_id] )                                                                    \n"
"        REFERENCES sessions ( [session_id] )                                                        \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [topaims] (                                                              \n"
"    [topaim_id] INTEGER NOT NULL,                                                                   \n"
"    [hash] INTEGER NOT NULL, \n"
"    [mapname] TEXT COLLATE NOCASE NOT NULL,                                                         \n"
"[packname] TEXT COLLATE NOCASE NOT NULL,\n"
"    [session_id] INTEGER NOT NULL,                                                                  \n"
"    [capture_time] INTEGER NOT NULL,                                                                \n"
"    [date] NOT NULL DEFAULT (strftime('%s', 'now')),                                                \n"
"    [extra] TEXT DEFAULT NULL,                                                                      \n"
"    PRIMARY KEY ( [topaim_id] ),                                                                    \n"
"    UNIQUE ( [mapname], [packname], [session_id] ),                                                     \n"
"FOREIGN KEY ([hash]) REFERENCES aimpacks ([hash]) ON DELETE CASCADE,\n"
"    FOREIGN KEY ( [session_id] )                                                                    \n"
"        REFERENCES sessions ( [session_id] )                                                        \n"
");                                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS[aimpacks] (\n"
"[hash] INTEGER PRIMARY KEY,\n"
"[name] TEXT COLLATE NOCASE NOT NULL,\n"
"[mapname] TEXT COLLATE NOCASE NOT NULL,\n"
"[owner_account_id] INTEGER NOT NULL,\n"
"[dateCreated] NOT NULL DEFAULT (strftime('%s', 'now')),\n"
"[weaponMode] INTEGER NOT NULL,\n"
"[numVariants] INTEGER NOT NULL,\n"
"[data] BLOB NOT NULL,\n"
"[numRepsPerVariant] INTEGER NOT NULL,\n"
"UNIQUE ([name], [mapname]),\n"
"FOREIGN KEY ([owner_account_id]) REFERENCES accounts ([account_id])"
");\n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS ip_whitelist (                                                           \n"
"    [ip_int] INTEGER PRIMARY KEY,                                                                   \n"
"    [mask_int] INTEGER,                                                                             \n"
"    [notes] TEXT);                                                                                  \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS ip_blacklist (                                                           \n"
"    [ip_int] INTEGER PRIMARY KEY,                                                                   \n"
"    [mask_int] INTEGER,                                                                             \n"
"    [notes] TEXT,                                                                                   \n"
"    [reason] TEXT,                                                                                  \n"
"    [banned_since] DATETIME,                                                                        \n"
"    [banned_until] DATETIME);                                                                       \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS pools (                                                                  \n"
"    [pool_id] INTEGER PRIMARY KEY AUTOINCREMENT,                                                    \n"
"    [short_name] TEXT,                                                                              \n"
"    [long_name] TEXT );                                                                             \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS pool_has_map (                                                           \n"
"    [pool_id] INTEGER REFERENCES [pools]([pool_id]) ON DELETE RESTRICT,                             \n"
"    [mapname] TEXT,                                                                                 \n"
"    [weight] INTEGER);                                                                              \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [tierlistmaps] (                                                         \n"
"	[account_id] INTEGER NOT NULL,                                                                   \n"
"	[map] TEXT COLLATE NOCASE NOT NULL,                                                              \n"
"	[tier] INTEGER NOT NULL,                                                                         \n"
"   PRIMARY KEY(account_id, map)                                                                     \n"
"   FOREIGN KEY(account_id) REFERENCES accounts(account_id) ON DELETE CASCADE);                      \n"
"                                                                                                    \n"
"CREATE TABLE IF NOT EXISTS [tierwhitelist] ( [map] TEXT COLLATE NOCASE NOT NULL PRIMARY KEY );      \n"
"                                                                                                    \n"
"CREATE TABLE CREATE TABLE IF NOT EXISTS [lastplayedmap] (                                           \n"
"	[map] TEXT COLLATE NOCASE NOT NULL PRIMARY KEY,                                                  \n"
"   [num] INTEGER NOT NULL DEFAULT 1,                                                                \n"
"	[datetime] NOT NULL DEFAULT (strftime('%s', 'now')));                                            \n"
"                                                                                                    \n"
"CREATE VIEW IF NOT EXISTS num_played_view AS                                                        \n"
"WITH t AS (SELECT map, AVG(tier) avgTier FROM tierlistmaps GROUP BY tierlistmaps.map)               \n"
"SELECT i.map, COALESCE(SUM(s.num), 0) numPlayed, avgTier                                            \n"
"FROM tierwhitelist i                                                                                \n"
"LEFT JOIN lastplayedmap s on s.map = i.map                                                          \n"
"LEFT JOIN t ON t.map = i.map                                                                        \n"
"GROUP BY i.map;                                                                                     \n"
"                                                                                                    \n"
// This view lets you see which sessions are hard referenced in other tables (ie, deleting would result
// in a failure due to a SQL constraint).
"CREATE VIEW IF NOT EXISTS sessions_info AS                                                          \n"
"SELECT                                                                                              \n"
"    session_id,                                                                                     \n"
"    hash,                                                                                           \n"
"    info,                                                                                           \n"
"    account_id,                                                                                     \n"
"    CASE WHEN (                                                                                     \n"
"	     sessions.account_id IS NOT NULL                                                             \n"
"	     OR EXISTS( SELECT 1 FROM fastcaps WHERE fastcaps.session_id = sessions.session_id )         \n"
"    )                                                                                               \n"
"    THEN 1 ELSE 0 END                                                                               \n"
"    referenced                                                                                      \n"
"FROM sessions;                                                                                      \n"
"                                                                                                    \n"
// This trigger handles deleting from the original table when performing on the view above. It will
// still fail on referenced sessions.
"CREATE TRIGGER IF NOT EXISTS sessions_info_delete_trigger                                           \n"
"INSTEAD OF DELETE ON sessions_info                                                                  \n"
"BEGIN                                                                                               \n"
"    DELETE FROM sessions WHERE sessions.session_id = OLD.session_id;                                \n"
"END;                                                                                                \n"
"                                                                                                    \n"
// This view helps in getting a quick alias for a given session id, either backed by its account or by
// its top used nickname. This is mostly only useful for offline people or from other subqueries since
// code should cache this for online people.
"CREATE VIEW IF NOT EXISTS player_aliases AS                                                         \n"
"SELECT                                                                                              \n"
"    session_id,                                                                                     \n"
"    account_id,                                                                                     \n"
"    CASE WHEN ( sessions.account_id IS NOT NULL ) THEN 1 ELSE 0 END                                 \n"
"    has_account,                                                                                    \n"
"    CASE WHEN ( sessions.account_id IS NOT NULL )                                                   \n"
"    THEN ( SELECT name FROM accounts WHERE accounts.account_id = sessions.account_id )              \n"
"    ELSE COALESCE (                                                                                 \n"
"        ( SELECT name FROM nicknames WHERE nicknames.session_id = sessions.session_id               \n"
"        ORDER BY nicknames.duration DESC LIMIT 1 ),                                                 \n"
"        'Padawan'                                                                                   \n"
"    ) END                                                                                           \n"
"    alias,                                                                                          \n"
"    COALESCE(                                                                                       \n"
"        CASE WHEN ( sessions.account_id IS NOT NULL )                                               \n"
"        THEN (                                                                                      \n"
"            SELECT SUM(duration)                                                                    \n"
"            FROM nicknames                                                                          \n"
"            LEFT JOIN sessions AS sess ON nicknames.session_id = sess.session_id                    \n"
"            WHERE account_id = sessions.account_id                                                  \n"
"        ) ELSE(                                                                                     \n"
"            SELECT SUM(duration)                                                                    \n"
"            FROM nicknames                                                                          \n"
"            WHERE session_id = sessions.session_id                                                  \n"
"        ) END,                                                                                      \n"
"        0                                                                                           \n"
"    )                                                                                               \n"
"    playtime	                                                                                     \n"
"FROM sessions;                                                                                      \n"
"                                                                                                    \n"
// This view only shows times for sessions with an account and aggregates them (it is possible that
// multiple sessions that are all tied to the same account have a time, as it is necessary to keep all
// times from all sessions in case of unlinking. This view helps with this). It also dynamically
// calculates the ranks so that querying is extremely simple.
"CREATE VIEW IF NOT EXISTS fastcaps_ranks AS                                                         \n"
"SELECT                                                                                              \n"
"    fastcaps.fastcap_id,                                                                            \n"
"    fastcaps.mapname,                                                                               \n"
"    fastcaps.type,                                                                                  \n"
"    player_aliases.account_id,                                                                      \n"
"    player_aliases.alias AS name,                                                                   \n"
"    RANK() OVER (                                                                                   \n"
"	     PARTITION BY fastcaps.mapname, fastcaps.type                                                \n"
"	     ORDER BY fastcaps.capture_time ASC, fastcaps.date ASC                                       \n"
"    )                                                                                               \n"
"    rank,                                                                                           \n"
"    MIN(fastcaps.capture_time) AS capture_time,                                                     \n"
"    fastcaps.date,                                                                                  \n"
"    fastcaps.extra                                                                                  \n"
"FROM fastcaps, player_aliases                                                                       \n"
"WHERE fastcaps.session_id = player_aliases.session_id AND player_aliases.has_account                \n"
"GROUP BY fastcaps.mapname, fastcaps.type, player_aliases.account_id;                                \n"
"                                                                                                    \n"
// Aggregates golds, silvers and bronzes for all accounts for each type
"CREATE VIEW IF NOT EXISTS fastcaps_leaderboard AS                                                   \n"
"SELECT                                                                                              \n"
"    account_id,                                                                                     \n"
"    name,                                                                                           \n"
"    type,                                                                                           \n"
"    SUM( CASE WHEN rank = 1 THEN 1 ELSE 0 END ) AS golds,                                           \n"
"    SUM( CASE WHEN rank = 2 THEN 1 ELSE 0 END ) AS silvers,                                         \n"
"    SUM( CASE WHEN rank = 3 THEN 1 ELSE 0 END ) AS bronzes                                          \n"
"FROM fastcaps_ranks                                                                                 \n"
"GROUP BY type, account_id                                                                           \n"
"HAVING golds > 0 OR silvers > 0 OR bronzes > 0;                                                     \n"
"                                                                                                    \n"
"CREATE VIEW IF NOT EXISTS topaims_ranks AS                                                          \n"
"SELECT                                                                                              \n"
"    topaims.topaim_id,                                                                              \n"
"    topaims.mapname,                                                                                \n"
"    topaims.packname,                                                                               \n"
"    player_aliases.account_id,                                                                      \n"
"    player_aliases.alias AS name,                                                                   \n"
"    RANK() OVER (                                                                                   \n"
"	     PARTITION BY topaims.mapname, topaims.packname                                              \n"
"	     ORDER BY topaims.capture_time DESC, topaims.date ASC                                       \n"
"    )                                                                                               \n"
"    rank,                                                                                           \n"
"    MAX(topaims.capture_time) AS capture_time,                                                      \n"
"    topaims.date,                                                                                   \n"
"    topaims.extra                                                                                   \n"
"FROM topaims, player_aliases                                                                        \n"
"WHERE topaims.session_id = player_aliases.session_id AND player_aliases.has_account                 \n"
"GROUP BY topaims.mapname, topaims.packname, player_aliases.account_id;                                  \n"
"                                                                                                    \n"
// Aggregates golds, silvers and bronzes for all accounts for each type
"CREATE VIEW IF NOT EXISTS topaims_leaderboard AS                                                    \n"
"SELECT                                                                                              \n"
"    account_id,                                                                                     \n"
"    name,                                                                                           \n"
"    packname,                                                                                       \n"
"    SUM( CASE WHEN rank = 1 THEN 1 ELSE 0 END ) AS golds,                                           \n"
"    SUM( CASE WHEN rank = 2 THEN 1 ELSE 0 END ) AS silvers,                                         \n"
"    SUM( CASE WHEN rank = 3 THEN 1 ELSE 0 END ) AS bronzes                                          \n"
"FROM topaims_ranks                                                                                  \n"
"GROUP BY packname, account_id                                                                           \n"
"HAVING golds > 0 OR silvers > 0 OR bronzes > 0;                                                       "
""
"CREATE TABLE IF NOT EXISTS [pugs] ( "
"[match_id] INTEGER PRIMARY KEY, "
"[datetime] NOT NULL DEFAULT (strftime('%s', 'now')), "
"[map] TEXT COLLATE NOCASE NOT NULL, "
"[duration] INTEGER NOT NULL, "
"[boonexists] INTEGER NOT NULL, "
"[win_team] INTEGER NOT NULL, "
"[red_score] INTEGER NOT NULL, "
"[blue_score] INTEGER NOT NULL "
"); "
" "
"CREATE TABLE IF NOT EXISTS [playerpugteampos] ( "
"[playerpugteampos_id] INTEGER PRIMARY KEY AUTOINCREMENT, "
"[match_id] INTEGER NOT NULL, "
"[session_id] INTEGER NOT NULL, "
"[team] INTEGER NOT NULL, "
"[duration] INTEGER NOT NULL, "
"[name] TEXT NOT NULL, "
"[pos] INTEGER, "
"[cap] INTEGER, "
"[ass] INTEGER, "
"[def] INTEGER, "
"[acc] INTEGER, "
"[air] INTEGER, "
"[tk] INTEGER, "
"[take] INTEGER, "
"[pitkil] INTEGER, "
"[pitdth] INTEGER, "
"[dmg] INTEGER, "
"[fcdmg] INTEGER, "
"[clrdmg] INTEGER, "
"[othrdmg] INTEGER, "
"[dmgtkn] INTEGER, "
"[fcdmgtkn] INTEGER, "
"[clrdmgtkn] INTEGER, "
"[othrdmgtkn] INTEGER, "
"[fckil] INTEGER, "
"[fckileff] INTEGER, "
"[ret] INTEGER, "
"[sk] INTEGER, "
"[ttlhold] INTEGER, "
"[maxhold] INTEGER, "
"[avgspd] INTEGER, "
"[topspd] INTEGER, "
"[boon] INTEGER, "
"[push] INTEGER, "
"[pull] INTEGER, "
"[heal] INTEGER, "
"[te] INTEGER, "
"[teeff] INTEGER, "
"[enemynrg] INTEGER, "
"[absorb] INTEGER, "
"[protdmg] INTEGER, "
"[prottime] INTEGER, "
"[rage] INTEGER, "
"[drain] INTEGER, "
"[drained] INTEGER, "
"[fs] INTEGER, "
"[bas] INTEGER, "
"[mid] INTEGER, "
"[eba] INTEGER, "
"[efs] INTEGER, "
"FOREIGN KEY([match_id]) REFERENCES pugs([match_id]) ON DELETE CASCADE, "
"FOREIGN KEY([session_id]) REFERENCES sessions([session_id]), "
"UNIQUE([match_id], [session_id], [pos]) "
"); "
""
"CREATE VIEW [accountstats] AS "
"WITH wins AS ( "
"SELECT playerpugteampos.session_id, playerpugteampos.pos, count() AS wins "
"FROM playerpugteampos "
"JOIN sessions ON sessions.session_id = playerpugteampos.session_id "
"JOIN pugs ON pugs.match_id = playerpugteampos.match_id "
"WHERE pugs.win_team = playerpugteampos.team "
"GROUP BY account_id, playerpugteampos.pos), "
"pugs_played AS ( "
"SELECT playerpugteampos.session_id, playerpugteampos.pos, count(*) AS pugs_played "
"FROM playerpugteampos "
"JOIN sessions ON sessions.session_id = playerpugteampos.session_id "
"JOIN pugs ON pugs.match_id = playerpugteampos.match_id "
"GROUP BY account_id, playerpugteampos.pos), "
"t AS ( "
"SELECT accounts.account_id, accounts.name, playerpugteampos.pos, "
"pugs_played, "
"ifnull(wins, 0) AS wins, "
"CAST(ifnull(wins, 0) AS FLOAT) / pugs_played AS winrate, "
"avg(cap * (1200000.0 / playerpugteampos.duration)) AS avg_cap, "
"avg(ass * (1200000.0 / playerpugteampos.duration)) AS avg_ass, "
"avg(def * (1200000.0 / playerpugteampos.duration)) AS avg_def, "
"CAST(sum((CASE WHEN acc IS NOT NULL THEN acc ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN acc IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_acc, "
"avg(air * (1200000.0 / playerpugteampos.duration)) AS avg_air, "
"avg(tk * (1200000.0 / playerpugteampos.duration)) AS avg_tk, "
"avg(take * (1200000.0 / playerpugteampos.duration)) AS avg_take, "
"avg(pitkil * (1200000.0 / playerpugteampos.duration)) AS avg_pitkil, "
"avg(pitdth * (1200000.0 / playerpugteampos.duration)) AS avg_pitdth, "
"avg(dmg * (1200000.0 / playerpugteampos.duration)) AS avg_dmg, "
"avg(fcdmg * (1200000.0 / playerpugteampos.duration)) AS avg_fcdmg, "
"avg(clrdmg * (1200000.0 / playerpugteampos.duration)) AS avg_clrdmg, "
"avg(othrdmg * (1200000.0 / playerpugteampos.duration)) AS avg_othrdmg, "
"avg(dmgtkn * (1200000.0 / playerpugteampos.duration)) AS avg_dmgtkn, "
"avg(fcdmgtkn * (1200000.0 / playerpugteampos.duration)) AS avg_fcdmgtkn, "
"avg(clrdmgtkn * (1200000.0 / playerpugteampos.duration)) AS avg_clrdmgtkn, "
"avg(othrdmgtkn * (1200000.0 / playerpugteampos.duration)) AS avg_othrdmgtkn, "
"avg(fckil * (1200000.0 / playerpugteampos.duration)) AS avg_fckil, "
"CAST(sum((CASE WHEN fckileff IS NOT NULL THEN fckileff ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN fckileff IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_fckileff, "
"avg(ret * (1200000.0 / playerpugteampos.duration)) AS avg_ret, "
"avg(sk * (1200000.0 / playerpugteampos.duration)) AS avg_sk, "
"avg(ttlhold * (1200000.0 / playerpugteampos.duration)) AS avg_ttlhold, "
"avg(maxhold * (1200000.0 / playerpugteampos.duration)) AS avg_maxhold, "
"CAST(sum(avgspd * playerpugteampos.duration) AS FLOAT) / CAST(sum(playerpugteampos.duration) AS FLOAT) AS avg_avgspd, "
"CAST(sum(topspd * playerpugteampos.duration) AS FLOAT) / CAST(sum(playerpugteampos.duration) AS FLOAT) AS avg_topspd, "
"avg(boon * (1200000.0 / playerpugteampos.duration)) AS avg_boon, "
"avg(push * (1200000.0 / playerpugteampos.duration)) AS avg_push, "
"avg(pull * (1200000.0 / playerpugteampos.duration)) AS avg_pull, "
"avg(heal * (1200000.0 / playerpugteampos.duration)) AS avg_heal, "
"avg(te * (1200000.0 / playerpugteampos.duration)) AS avg_te, "
"CAST(sum((CASE WHEN teeff IS NOT NULL THEN teeff ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN teeff IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_teeff, "
"avg(enemynrg * (1200000.0 / playerpugteampos.duration)) AS avg_enemynrg, "
"avg(absorb * (1200000.0 / playerpugteampos.duration)) AS avg_absorb, "
"avg(protdmg * (1200000.0 / playerpugteampos.duration)) AS avg_protdmg, "
"avg(prottime * (1200000.0 / playerpugteampos.duration)) AS avg_prottime, "
"avg(rage * (1200000.0 / playerpugteampos.duration)) AS avg_rage, "
"avg(drain * (1200000.0 / playerpugteampos.duration)) AS avg_drain, "
"avg(drained * (1200000.0 / playerpugteampos.duration)) AS avg_drained, "
"CAST(sum((CASE WHEN fs IS NOT NULL THEN fs ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN fs IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_fs, "
"CAST(sum((CASE WHEN bas IS NOT NULL THEN bas ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN bas IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_bas, "
"CAST(sum((CASE WHEN mid IS NOT NULL THEN mid ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN mid IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_mid, "
"CAST(sum((CASE WHEN eba IS NOT NULL THEN eba ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN eba IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_eba, "
"CAST(sum((CASE WHEN efs IS NOT NULL THEN efs ELSE 0 END) * playerpugteampos.duration) AS FLOAT) / CAST(sum(CASE WHEN efs IS NOT NULL THEN playerpugteampos.duration ELSE 0 END) AS FLOAT) AS avg_efs "
"FROM playerpugteampos "
"JOIN sessions ON playerpugteampos.session_id = sessions.session_id "
"JOIN accounts ON accounts.account_id = sessions.account_id "
"JOIN pugs ON pugs.match_id = playerpugteampos.match_id "
"LEFT JOIN wins ON wins.session_id = sessions.session_id AND wins.pos = playerpugteampos.pos "
"JOIN pugs_played ON pugs_played.session_id = sessions.session_id AND pugs_played.pos = playerpugteampos.pos "
"GROUP BY playerpugteampos.pos, accounts.account_id "
"ORDER BY playerpugteampos.pos ASC, accounts.account_id ASC) "
"SELECT account_id, "
"name, "
"pos, "
"pugs_played, "
"RANK() OVER (PARTITION BY pos ORDER BY pugs_played DESC) pugs_played_rank, "
"wins, "
"RANK() OVER (PARTITION BY pos ORDER BY wins DESC) wins_rank, "
"winrate, "
"RANK() OVER (PARTITION BY pos ORDER BY winrate DESC) winrate_rank, "
"avg_cap, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_cap DESC) avg_cap_rank, "
"avg_ass, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_ass DESC) avg_ass_rank, "
"avg_def, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_def DESC) avg_def_rank, "
"avg_acc, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_acc DESC) avg_acc_rank, "
"avg_air, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_air DESC) avg_air_rank, "
"avg_tk, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_tk DESC) avg_tk_rank, "
"avg_take, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_take DESC) avg_take_rank, "
"avg_pitkil, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_pitkil DESC) avg_pitkil_rank, "
"avg_pitdth, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_pitdth DESC) avg_pitdth_rank, "
"avg_dmg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_dmg DESC) avg_dmg_rank, "
"avg_fcdmg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_fcdmg DESC) avg_fcdmg_rank, "
"avg_clrdmg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_clrdmg DESC) avg_clrdmg_rank, "
"avg_othrdmg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_othrdmg DESC) avg_othrdmg_rank, "
"avg_dmgtkn, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_dmgtkn DESC) avg_dmgtkn_rank, "
"avg_fcdmgtkn, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_fcdmgtkn DESC) avg_fcdmgtkn_rank, "
"avg_clrdmgtkn, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_clrdmgtkn DESC) avg_clrdmgtkn_rank, "
"avg_othrdmgtkn, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_othrdmgtkn DESC) avg_othrdmgtkn_rank, "
"avg_fckil, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_fckil DESC) avg_fckil_rank, "
"avg_fckileff, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_fckileff DESC) avg_fckileff_rank, "
"avg_ret, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_ret DESC) avg_ret_rank, "
"avg_sk, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_sk DESC) avg_sk_rank, "
"avg_ttlhold, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_ttlhold DESC) avg_ttlhold_rank, "
"avg_maxhold, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_maxhold DESC) avg_maxhold_rank, "
"avg_avgspd, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_avgspd DESC) avg_avgspd_rank, "
"avg_topspd, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_topspd DESC) avg_topspd_rank, "
"avg_boon, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_boon DESC) avg_boon_rank, "
"avg_push, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_push DESC) avg_push_rank, "
"avg_pull, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_pull DESC) avg_pull_rank, "
"avg_heal, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_heal DESC) avg_heal_rank, "
"avg_te, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_te DESC) avg_te_rank, "
"avg_teeff, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_teeff DESC) avg_teeff_rank, "
"avg_enemynrg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_enemynrg DESC) avg_enemynrg_rank, "
"avg_absorb, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_absorb DESC) avg_absorb_rank, "
"avg_protdmg, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_protdmg DESC) avg_protdmg_rank, "
"avg_prottime, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_prottime DESC) avg_prottime_rank, "
"avg_rage, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_rage DESC) avg_rage_rank, "
"avg_drain, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_drain DESC) avg_drain_rank, "
"avg_drained, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_drained DESC) avg_drained_rank, "
"avg_fs, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_fs DESC) avg_fs_rank, "
"avg_bas, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_bas DESC) avg_bas_rank, "
"avg_mid, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_mid DESC) avg_mid_rank, "
"avg_eba, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_eba DESC) avg_eba_rank, "
"avg_efs, "
"RANK() OVER (PARTITION BY pos ORDER BY avg_efs DESC) avg_efs_rank "
"FROM t WHERE pugs_played >= 10;"
""
"CREATE TABLE IF NOT EXISTS [cachedplayerstats] ( "
"[cachedplayerstats_id] INTEGER PRIMARY KEY AUTOINCREMENT, "
"[account_id] INTEGER NOT NULL, "
"[type] INTEGER, "
"[pos] INTEGER, "
"[str] TEXT, "
"FOREIGN KEY([account_id]) REFERENCES accounts([account_id]) ON DELETE CASCADE, "
"UNIQUE(account_id, type, pos) "
");"
""
"CREATE TABLE IF NOT EXISTS [playerratings] ( "
"[rating_id] INTEGER PRIMARY KEY AUTOINCREMENT, "
"[rater_account_id] INTEGER NOT NULL, "
"[ratee_account_id] INTEGER NOT NULL, "
"[pos] INTEGER NOT NULL, "
"[rating] INTEGER NOT NULL, "
"FOREIGN KEY([rater_account_id]) REFERENCES accounts([account_id]) ON DELETE CASCADE, "
"FOREIGN KEY([ratee_account_id]) REFERENCES accounts([account_id]) ON DELETE CASCADE, "
"UNIQUE([rater_account_id], [ratee_account_id], [pos]) "
");";